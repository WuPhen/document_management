--------------------07/03/2019------------
#git
git là 1 version control system, gồm 3 phần local, centralized
local : lưu các thay đổi của file ở database máy local
centralized : tương tự local nhưng nó được lưu ở server
distributed : các server khác của git dùng để backup 

Các lệnh của git
git add : đưa các file thay đổi vào staging area (track file)
git reset HEAD <tên file> : đưa các file thay đổi từ  staging area về untracked
git commit -m "message": đưa các file thay đổi từ staging vào local repository và kèm theo message
git commit : giống git commit -m nhưng không có message và phải thêm message bằng text editor trên bash
git status : hiển thị các trạng thái của file thay đổi (track hay untrack, modified hay new hay deleted)
git remote add remotename <url> : tạo remote
git remote -v : xem các remote hiện có

--------------------11/03/2019----------------
#ruby_variable
local var (local) : biến cục bộ
global var ($global) : biến global, khai báo trong 1 file và tất cả class và method trong file đó có thể access
instance var (@instance) : biến trong 1 class, thường là các thuộc tính của class đó và dc khởi tạo trong constructor
class var (@@class) : biến static trong class
constant var (CONSTANT)

puts và p và print
Cả hai hàm puts và print đều được dùng để hiển thị kết quả ra màn hình. Tuy nhiên khi sử dụng puts thì Ruby sẽ thêm dòng mới vào sau kết quả hiển thị còn print thì không
p sẽ gọi phương thức inspect của đối tượng cần in ra, phương thức inspect sẽ liệt kê tất cả các thông tin của đối tượng

phương thức .class : cho biết kiểu dữ liệu của đối tương
các hàm thao tác vs string upcase, downcase, swapcase, reverse
"".strip = "".trim trong cac nn khac

--------------------12/03/2019----------------
method với tham số bình thường

def method (a,b,c)
   #
end

method vs tham số được gán mặc định
def method (b='default',c = [])
   #
end

class method : có thẻ truy cập thông qua Classname.<tên method>
intance method : method trong class
array.each và array.collect và array.collect!
array.collect : return sự thay đổi của mảng
array.collect! : return sự thay đổi của mảng thay đổi luôn mảng
array.each : chỉ lấy phần tử trong mảng để thao tác và không làm thay đổi mảng
Duyệt từng phần tử trong mảng kèm với index của nó
array.each_with_index { |n, i|
  array[i] += 1
}

--Block, lambda , Procs và Yield
- Block : 1 block được bắt đàu với do và kết thúc với end hoặc {}
Mọi thứ trong ruby đều là object ngoại trừ block
- Procs : Proc là đối tượng đại diện cho block, Proc chính là block được đặt tên
proc_object_1 = Proc.new {
  puts "block 1"
}
#or
proc_object_2 = Proc.new do
  puts "block 1"
end

gọi proc thực thi các câu lệnh trong nó bằng : <tên proc>.call
proc với tham số

proc_object_2 = Proc.new do | x, y|
  puts "block 1"
end
proc_object_2.call(1, 2)

- Lambda : giống proc nhưng nó sẽ báo lỗi nếu không truyền đủ tham số và lambda trả về giá trị của bản thân nó còn proc thì không
lambda_object = lambda do |a, b|
  #do sth
end
- Yield : dùng để thực hiện một khối bất kỳ trong 1 phương thức
--vòng lặp
while : lặp cho trong khi điều kiện còn đúng
until : lặp cho đến khi điều kiện đúng
--Iterators : cung cấp một cách để truy cập vào dữ những phần tử của một tập các đối tượng tuần tự mà không làm lộ cách thể hiện (VD kiểu dữ liệu) của chúng
-collection.each {}
-collection.map{} : lấy tất cả các đối tượng, sử dụng chúng chạy biểu thức trong block và trả về mảng mới là kết quả sau khi chạy hết tất cả các phần tử của mảng đối với biểu thức trong block
-collection.select{|e| e>5} trả ra các giá trị thỏa mãn điều kiện trong block hoặc kết quả biểu thức trong block
-collection.inject{|result,element| result+=element} : cung cấp cho ta một biến số và cập nhập giá trị của biến số ấy sau mỗi phần tử của mảng được duyệt qua, dùng cho việc muốn trả về một kết quả thay vì 1 mảng như các iterator khác

--các từ khóa thao tác trong mảng
-break : dừng vòng lặp
-next : tiếp tục vòng lặp
-redo : lặp lại 1 bước trong vòng lặp
-retry : lặp lại toàn bộ vòng lặp từ đầu

--condition
-if-then-elsif-end
-unless-else-end
-case-when giống giống switch-case
case sth
when 1..2
    #do sth
when 1..2
    #do sth
else 
    #do sth
end

--Hash
hash = Hash["key1":value1,"key2":value2]
hash = {"key1"=>value1,"key2"=>value2}
thêm 1 item vào : hash["key3"] = value3
---sumary
-cơ bản về hàm
-duyệt mảng với iterator: each, collect, collect!, map, select, inject
-các loại block : block, proc, lambda, yield
-vòng lặp : while, for-in, until và các thao tác trong vòng lặp : next, break, redo, retry
-điều kiện : if-then-elseif-end, unless-else-end, case-when
-mảng băm và thao tác vs hash : display hash (compact), 

--------------------13/03/2019----------------
--Hướng đối tượng
-Phương thức initialize : là phương thức sẽ được gọi đầu tiên khi đối tượng của class được tạo
-Biến instance, cú pháp @<tên biến> thể hiện các thuộc tính của class
-accessor và setter : thuộc tính của class (biến instance) sẽ được truy cập và set dữ liệu thông qua các phương thức setter và accessor, có thể khai tạo các accessor này một cách nhanh chóng bằng attr_accessor :<tên instance 1>, :<tên instance 2>
-biến class : phạm vi hoạt động trong class, và nó tồn tại với giá trị không đổi trong các instance của class đó
-class method

--cấu trúc của 1 object khi được khởi tạo
-kclass : con trỏ trỏ tới lớp của 1 đối tượng
-iv_tbl : “instance variable table” một mảng băm chưa đựng các biến instance của đối tượng này
-flags : một tập các cờ trạng thái Boolean của Object như cờ báo trạng thái Object bị hỏng, bị garbage collection đánh dấu, bị khóa 

--cấu trúc của 1 class
vì các class đều thừa kế lại object nên nó sẽ có các thuộc tính của object ở trên và còn có thêm:
-m_tbl : “Method Table”, một bảng băm chứa đựng địa chỉ các instance method của class hay module
-super : con trỏ trỏ đến lớp cha của nó
-Ruby không dùng abstact method, dùng module để thay thế interface

--Ruby access modifiers
-public có thể gọi bên ngoài class, mặc định tất cả các phương thức đều là public trừ initialize
-private chỉ có thể sử dụng bên trong phạm vi class và không thể truy cập bằng self.private_method bên trong class
-protected giống private nhưng có thể gọi bằng self.protected_method bên trong class và các class con thừa kế class này

--lớp File 
-File.open(url/tên file, option*) : mở file
-File.close : đóng file
-File.delete(url/tên file) : xóa file
-File.read(url/tên file) : xóa file

--------------------14/03/2019----------------
--include và extend module
class method self.name và instance method name : class method chỉ được gọi bằng các ClassName.class_method, instance method chỉ được gọi bằng các instance của class đó
-include một module chỉ add những instance method của module đó, khi một module hay class include một module thì Ruby sẽ gọi hàm "included" và các method instant của module được include sẽ trở thành instance method của class/module đó
-extend giống include nhưng nó sẽ biến các instance method của module thành 

class method của module/class extend nó, khi một module hay class extend  một module thì Ruby sẽ gọi hàm "extended"
-biến constant có thể được truy cập từ bên ngoài class thoogn qua ClassName::CONST

--Error handling
-Khối begin - rescue - else - ensure - end : khi code trong begin lỗi thì code trong rescue sẽ dc thực thi và ngược lại code trong else sẽ được thực thi, và code trong khồi ensure sẽ được thực thi dù có lỗi hay không
--Regular expression
-String.sub(regex,content) : thay thế phần tử đầu tiên match với regex bằng content
-String.gsub(regex,content) : thay thế tất cả phần tử match với regex bằng content
-dấu "!" sau mỗi hàm sẽ làm thay đổi cả String
[a-z] tất cả các kí tự trừ a-z
[v][u] tất cả vu
[abc] tất cả các ký tự a,b,c
--------------------15/03/2019----------------
--thực hành https://github.com/vupdh-0867/ruby-practice/tree/master/Exercise
--------------------16/03/2019----------------
-Block chỉ là một phần trong hàm (từng dòng lệnh một), không có ý nghĩa gì nếu đứng độc lập
-Lambda là một function và không có tên cụ thể (giống anonymous function trong js)
-Dành cả thanh xuân để làm test

--------------------16/03/2019----------------
- Class.ancestors : in ra chuỗi thừa kế của class đó dưới dạng mảng
- <class or instance>.respond_to?('method') : kiểm tra method có trong class/class của instance đó hay không
- Mỗi lần 1 string được tạo ra sẽ có 1 đối tượng sinh ra chứa nó dù nội dung giống nhau
- Substring của string s s[0..s.length]
- undef method_name : undefined một phương thức

--------------------17/03/2019----------------
-rails generate scaffold: tạo khung phát triển cho model
-rails generate controller StaticPages home help tạo controller
-rails destroy  controller StaticPages home help xóa controller

--------------------18/03/2019----------------
-stylesheet_link_tag 'application', media: 'all',
                                   'data-turbolinks-track': 'reload' sẽ dc render thành
-<link data-turbolinks-track="true" href="/assets/application.css" media="all"
rel="stylesheet" />
- String.empty : string rỗng ""
- String.blank : string chỉ bao gồm <space> và <tab> và rỗng ""
- String.split(<character>) : tách string về 1 mảng string có các element là nội dung được ngăn cách bởi <character>
- array[start..(array.length-1)] and array[start..-1] duyệt từ vị trí start đến cuối mảng
- nil và false là blank còn "", true thì không
- Array và Hash thì là blank? và empty? khi chúng empty

--------------------19/03/2019----------------

- app/assets: assets specific to the present application
- lib/assets: assets for libraries written by your dev team
- vendor/assets: assets from third-party vendors

--------------------25/03/2019----------------
form trong rails
<%= form_for(@user) do |f| %>
  .
  .
<% end %>
user.errors.full_messages : trả về 1 array chứa các message lỗi trong validate
cấu trúc i18n cho form refs:https://stackoverflow.com/questions/3516478/rails-i18n-and-yml-structure-for-form-labels
redirect thì dùng flash, render thì dùng flash.now

--------------------26/03/2019----------------
link_to | redirect_to <object> trỏ tới route show của object đó
self trong mehtod là instance của class, self trong self.class_method chính là class đó
cookies[:<name>] = { value: <value>, expires: <time>.from_now.utc } cookie có thời hạn
cookies.permanent[:<name>] = <value> : cookies vĩnh viễn
seeder dùng để tạo dữ liệu mẫu cho db
faker dùng để tạo dữ liệu ảo
will_paginate hỗ trợ phân trang
--------------------28/03/2019----------------
- cấu hình gửi mail cho môi trường dev và prod
- gửi mail dược tỏng môi trường dev còn prod chưa thử :p
- resource sẽ tạo ra các route không có param id
- debugger và continue 
--------------------29/03/2019----------------
- các associasion belongs_to <tablename>, class_name :"Tablename",foreign_key: "patron_id" : bảng có khóa ngoại thuộc bảng khác
- Nếu set :touch bằng true, thì khi lưu hoặc xóa object cha, object con sẽ được cập nhật updated_at hoặc updated_on vào đúng thời điểm đó
- Các scope trong associasion
+ where : belongs_to :author, -> { where active: true }
+ includes : belongs_to :book, -> { includes :author } -Phương thức includes sẽ lấy sẵn model đi kèm với model quan hệ để có thể sử dụng mà không cần query thêm
+ readonly : các object của quan hệ được lấy ra của model có scope này sẽ không thể bị thay đổi 
+ select : chỉ định các trường có thể lấy ra khi gọi ra các object quan hệ
--------------------01/04/2019----------------
-user.microposts.create(arg) và user.microposts.create!(arg), create! sẽ raise exception khi thất bại
Scope: Scope là một câu lệnh truy vấn đặc biệt mà bạn có thể sử dụng nhiều lần mà không cần viết lại
default_scope: scope cho tất cả các câu lệnh query trong model
hàm time_ago_in_words : convert datetime trong db thành dạng đọc được
hàm any? : @user.microposts.any? kiểm tra microposts có rỗng hay không
(1..10).to_a.take 6 : lấy 6 phần tử đầu tiên của mảng thành mảng mới, nếu tham số của take lớn hơn số phần tử của mảng thì nó sẽ lấy toàn bộ mảng
request.referrer trả về url của trang mà request được gửi đi
--------------------01/04/2019----------------
- về gem i18n-js, gem này sẽ lấy các file locale (en.yml, vi.yml) và export dữ liệu trong đó ra 1 file js (translations.js) để từ đó I18nJS có thể dùng đuợc
- chapter 14
-định nghĩa class trung gian
has_many :active_relationships, class_name:  "Relationship",
                                  foreign_key: "follower_id",
                                  dependent:   :destroy
-được theo dõi bởi nhiều người
has_many :following, through: :active_relationships, source: :followed trường followed_id trong bảng relationships, following tự đặt thay cho followeds
-theo dõi nhiều người
has_many :followers, through: :passive_relationships, source: :follower trường follower_id trong bảng relationships, followers

- resources :users do
    member do
      get :following, :followers
    end
  end
tạo ra 2 route /users/1/following và /users/1/followers với action following và followers trong usercontroller

member và collection trong rails route member sẽ tạo ra các route có yêu cầu id trong khi collection thì không
- following << other_user bằng với following.push(other_user)
--------------------01/04/2019----------------
respond_to do |format|
      format.html{redirect_to @user}
      format.js
end

- Rails cung cấp sẵn các helper để hiển thị đối tượng có thể kích hoạt ajax trên trình duyệt, và giúp nó hoạt động được cả trong trình duyệt bị tắt js
--------------------------------------------rails test note-------------------------------
test note 
http://www.upworkcoverletter.com/upwork-web-development/ruby-on-rails-test-2016/index.html
http://cleartest4upwork.blogspot.com/2016/03/ruby-on-rails-test-upwork-answer.html

--------------------------------------------backup vscode---------------------------------
GitHub Token: e79a52e6f6743373af90b7c9ce05b7bda18a92f9
GitHub Gist: 3db8e6205b034497543c64db27808d4a
GitHub Gist Type: Secret
https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync
--------------------------------------------ins ruby---------------------------------
https://linuxize.com/post/how-to-install-ruby-on-ubuntu-18-04/
--------------------------------------------ins rails---------------------------------
https://gorails.com/setup/ubuntu/18.10
https://gorails.com/setup/ubuntu/18.04
https://www.digitalocean.com/community/tutorials/how-to-install-ruby-on-rails-with-rbenv-on-ubuntu-18-04
--------------------------------------------show git branch---------------------------------
https://sujipthapa.co/blog/git-pro-tip-show-your-branch-on-linux-ubuntu-terminal
https://askubuntu.com/questions/730754/how-do-i-show-the-git-branch-with-colours-in-bash-prompt
--------------------------------------------VI---------------------------------
https://vinasupport.com/huong-dan-cai-bo-go-tieng-viet-ibus-unikey-tren-ubuntu/
https://www.sitecuatui.com/ibus-unikey-go-tieng-viet-ubuntu/

background job - bất đồng bộ trong rails, trong những trường hợp khi server xử lý requets bị lỗi bất ngờ khiến luông xử lý bị delay/đơ, khi đó server phải đợi các tác vụ này xong mới thực hiện response về cho client, khi đó phía client sẽ phải đợi lâu để nhận được response. để xử lý điều này, các tác vụ có khả năng bị delay sẽ được đưa xuống chạy ở background gọi là các background jobs. Trong rails hiện có 1 số gem hỗ trợ cho việc tạo các background job như delayed job, delay job sẽ lưu các thông tin của các background job vào trong bảng delayed_jobs và dựa vào đó để chạy các background jobs, khi có 1 job hoàn thành thì thông tin của job đó trong sẽ bị xóa khỏi bảng delayed_jobs
